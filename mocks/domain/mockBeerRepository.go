// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/castillofranciscodaniel/golang-beers/domain (interfaces: BeerRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/castillofranciscodaniel/golang-beers/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBeerRepository is a mock of BeerRepository interface.
type MockBeerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBeerRepositoryMockRecorder
}

// MockBeerRepositoryMockRecorder is the mock recorder for MockBeerRepository.
type MockBeerRepositoryMockRecorder struct {
	mock *MockBeerRepository
}

// NewMockBeerRepository creates a new mock instance.
func NewMockBeerRepository(ctrl *gomock.Controller) *MockBeerRepository {
	mock := &MockBeerRepository{ctrl: ctrl}
	mock.recorder = &MockBeerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeerRepository) EXPECT() *MockBeerRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBeerRepository) Get() ([]domain.BeerSql, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]domain.BeerSql)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBeerRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBeerRepository)(nil).Get))
}

// GetById mocks base method.
func (m *MockBeerRepository) GetById(arg0 int64) (*domain.BeerSql, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*domain.BeerSql)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBeerRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBeerRepository)(nil).GetById), arg0)
}

// Post mocks base method.
func (m *MockBeerRepository) Post(arg0 domain.Beer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockBeerRepositoryMockRecorder) Post(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockBeerRepository)(nil).Post), arg0)
}
